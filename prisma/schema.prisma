// Ticketing platform schema: Business → Experience → Event → Session
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  password  String
  role      UserRole @default(EMPLOYEE)
  businessId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  business Business? @relation(fields: [businessId], references: [id])

  @@map("users")
}

model Business {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  experiences Experience[]

  @@map("businesses")
}

model Guest {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@map("guests")
}

model Experience {
  id          String  @id @default(cuid())
  name        String
  slug        String
  description String?
  basePrice   Decimal @db.Decimal(10, 2)
  duration    Int     // minutes
  maxCapacity Int
  isActive    Boolean @default(true)
  sortOrder   Int     @default(1)
  businessId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  business    Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  events      Event[]

  @@unique([businessId, slug])
  @@map("experiences")
}

model Event {
  id           String   @id @default(cuid())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  maxCapacity  Int?     // Override experience default if needed
  isActive     Boolean  @default(true)
  experienceId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  sessions   Session[]
  addOns     AddOn[]

  @@map("events")
}

model Session {
  id           String   @id @default(cuid())
  startTime    DateTime
  endTime      DateTime
  maxCapacity  Int?     // Override event/experience default if needed
  currentCount Int      @default(0)
  isActive     Boolean  @default(true)
  eventId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  event    Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("sessions")
}

model AddOn {
  id           String  @id @default(cuid())
  name         String
  description  String?
  price        Decimal @db.Decimal(10, 2)
  isActive     Boolean @default(true)
  sortOrder    Int     @default(1)
  eventId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  bookingItems BookingItem[]

  @@unique([eventId, name])
  @@map("add_ons")
}

model Booking {
  id        String        @id @default(cuid())
  sessionId String
  guestId   String
  quantity  Int
  total     Decimal       @db.Decimal(10, 2)
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  session Session       @relation(fields: [sessionId], references: [id])
  guest   Guest         @relation(fields: [guestId], references: [id])
  items   BookingItem[]

  @@map("bookings")
}

model BookingItem {
  id         String          @id @default(cuid())
  bookingId  String
  addOnId    String?
  quantity   Int
  unitPrice  Decimal         @db.Decimal(10, 2)
  totalPrice Decimal         @db.Decimal(10, 2)
  itemType   BookingItemType
  createdAt  DateTime        @default(now())

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  addOn   AddOn?  @relation(fields: [addOnId], references: [id])

  @@map("booking_items")
}

enum UserRole {
  OWNER
  EMPLOYEE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum BookingItemType {
  SESSION
  ADD_ON
}